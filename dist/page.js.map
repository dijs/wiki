{"version":3,"sources":["../src/page.js"],"names":["wikiPage","get","rest","obj","first","firstValue","Object","keys","getFileName","text","indexOf","split","name","apiOptions","prop","explaintext","titles","raw","title","then","res","query","pages","pageid","extract","generator","gimlimit","iiprop","map","id","rvprop","rvsection","rawInfo","wikitext","parser","general","info","length","toLowerCase","_wikitext","key","metadata","hasOwnProperty","rawPageInfo","html","rvlimit","rvparse","revisions","rawContent","content","parseContent","summary","exintro","images","rawImages","image","imageinfo","reduce","imageInfos","list","url","references","ellimit","extlinks","link","links","plnamespace","pllimit","limit","aggregated","_pagination","categories","category","coordinates","page","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","badge","logo","mainImageName","sort","b","a","find","filename","replace","langlinks","lllimit","lang","fullInfo","tables"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api, parseContent } from './util';\nimport infoboxParser from 'infobox-parser';\nimport { parseCoordinates } from './coordinates';\n\nconst get = (obj, first, ...rest) => {\n\tif (obj === undefined || first === undefined) return obj;\n\tif (typeof first === 'function') {\n\t\treturn get(first(obj), ...rest);\n\t}\n\treturn get(obj[first], ...rest);\n};\n\nconst firstValue = obj => {\n\tif (typeof obj === 'object') return obj[Object.keys(obj)[0]];\n\treturn obj[0];\n};\n\nconst getFileName = text => {\n\tif (!text) return undefined;\n\tif (text.indexOf(':') !== -1) {\n\t\tconst [, name] = text.split(':');\n\t\treturn name;\n\t}\n\treturn text;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n\tconst raw = rawPageInfo;\n\n\t/**\n\t * HTML from page\n\t * @example\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\n\t * @method WikiPage#html\n\t * @return {Promise}\n\t */\n\tfunction html() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvlimit: 1,\n\t\t\trvparse: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * Structured content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\n\t * @method WikiPage#content\n\t * @return {Promise}\n\t */\n\tfunction content() {\n\t\treturn rawContent().then(parseContent);\n\t}\n\n\t/**\n\t * Raw content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawContent()).then(console.log);\n\t * @method WikiPage#rawContent\n\t * @return {Promise}\n\t */\n\tfunction rawContent() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extracts',\n\t\t\texplaintext: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Text summary from page\n\t * @example\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\n\t * @method WikiPage#summary\n\t * @return {Promise}\n\t */\n\tfunction summary() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extracts',\n\t\t\texplaintext: '',\n\t\t\texintro: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Raw data from images from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n\t * @method WikiPage#rawImages\n\t * @return {Promise}\n\t */\n\tfunction rawImages() {\n\t\treturn api(apiOptions, {\n\t\t\tgenerator: 'images',\n\t\t\tgimlimit: 'max',\n\t\t\tprop: 'imageinfo',\n\t\t\tiiprop: 'url',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tif (res.query) {\n\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\n\t\t\t}\n\t\t\treturn [];\n\t\t});\n\t}\n\n\t/**\n\t * Main image URL from infobox on page\n\t * @example\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n\t * @method WikiPage#mainImage\n\t * @return {Promise}\n\t */\n\tfunction mainImage() {\n\t\treturn Promise.all([rawImages(), info()]).then(([images, info]) => {\n\t\t\t// Handle different translations of \"image\" here\n\t\t\tconst mainImageName = getFileName(\n\t\t\t\tinfo.image ||\n\t\t\t\t\tinfo.bildname ||\n\t\t\t\t\tinfo.imagen ||\n\t\t\t\t\tinfo.Immagine ||\n\t\t\t\t\tinfo.badge ||\n\t\t\t\t\tinfo.logo\n\t\t\t);\n\t\t\t// Handle case where no info box exists\n\t\t\tif (!mainImageName) {\n\t\t\t\treturn rawInfo().then(text => {\n\t\t\t\t\tif (!images.length) return undefined;\n\t\t\t\t\t// Sort images by what is seen first in page's info text\n\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n\t\t\t\t\tconst image = images[0];\n\t\t\t\t\treturn image.imageinfo.length > 0\n\t\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t\t: undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst image = images.find(({ title }) => {\n\t\t\t\tconst filename = getFileName(title);\n\t\t\t\t// Some wikis use underscores for spaces, some don't\n\t\t\t\treturn (\n\t\t\t\t\tfilename === mainImageName ||\n\t\t\t\t\tfilename.replace(/\\s/g, '_') === mainImageName\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn image && image.imageinfo.length > 0\n\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t: undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Image URL's from page\n\t * @example\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\n\t * @method WikiPage#images\n\t * @return {Promise}\n\t */\n\tfunction images() {\n\t\treturn rawImages().then(images => {\n\t\t\treturn images\n\t\t\t\t.map(image => image.imageinfo)\n\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\n\t\t\t\t.map(info => info.url);\n\t\t});\n\t}\n\n\t/**\n\t * References from page\n\t * @example\n\t * wiki.page('batman').then(page => page.references()).then(console.log);\n\t * @method WikiPage#references\n\t * @return {Promise}\n\t */\n\tfunction references() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extlinks',\n\t\t\tellimit: 'max',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extlinks.map(link => link['*']));\n\t}\n\n\t/**\n\t * Paginated links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.links()).then(console.log);\n\t * @method WikiPage#links\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\n\t * @param  {Number} [limit] - number of links per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction links(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'links',\n\t\t\t\tplnamespace: 0,\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres => res.query.pages[raw.pageid].links.map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Paginated categories from page\n\t * @example\n\t * wiki.page('batman').then(page => page.categories()).then(console.log);\n\t * @method WikiPage#categories\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\n\t * @param  {Number} [limit] - number of categories per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction categories(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'categories',\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres =>\n\t\t\t\tres.query.pages[raw.pageid].categories.map(category => category.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Geographical coordinates from page\n\t * @example\n\t * wiki().page('Texas').then(texas => texas.coordinates())\n\t * @method WikiPage#coordinates\n\t * @return {Promise}\n\t */\n\tfunction coordinates() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'coordinates',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tconst page = res.query.pages[raw.pageid];\n\t\t\tif (page.coordinates) {\n\t\t\t\treturn page.coordinates[0];\n\t\t\t}\n\t\t\t// No coordinates for this page, check infobox for deprecated version\n\t\t\treturn info().then(data => parseCoordinates(data));\n\t\t});\n\t}\n\n\tfunction rawInfo(title) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvsection: 0,\n\t\t\ttitles: title || raw.title\n\t\t}).then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'));\n\t}\n\n\t/**\n\t * Fetch and parse tables within page\n\t * @method WikiPage#tables\n\t * @return {Promise} Resolves to a collection of tables\n\t */\n\tfunction tables() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\ttitles: raw.title\n\t\t})\n\t\t\t.then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\n\t\t\t.then(wikitext => infoboxParser(wikitext, apiOptions.parser).tables);\n\t}\n\n\t/**\n\t * Get general information from page, with optional specifc property\n\t * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.info('alter_ego'));\n\t * @method WikiPage#info\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n\t */\n\tfunction info(key) {\n\t\treturn rawInfo()\n\t\t\t.then(wikitext => {\n\t\t\t\t// Use general data for now...\n\t\t\t\tconst info = infoboxParser(wikitext, apiOptions.parser).general;\n\t\t\t\tif (Object.keys(info).length === 0) {\n\t\t\t\t\t// If empty, check to see if this page has a templated infobox\n\t\t\t\t\treturn rawInfo(`Template:Infobox ${raw.title.toLowerCase()}`).then(\n\t\t\t\t\t\t_wikitext =>\n\t\t\t\t\t\t\tinfoboxParser(_wikitext || '', apiOptions.parser).general\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn info;\n\t\t\t})\n\t\t\t.then(metadata => {\n\t\t\t\tif (!key) {\n\t\t\t\t\treturn metadata;\n\t\t\t\t}\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\n\t\t\t\t\treturn metadata[key];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Get the full infobox data, parsed in a easy to use manner\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\n\t * @method WikiPage#fullInfo\n\t * @return {Promise} - Parsed object of all infobox data\n\t */\n\tfunction fullInfo() {\n\t\treturn rawInfo().then(wikitext =>\n\t\t\tinfoboxParser(wikitext, apiOptions.parser)\n\t\t);\n\t}\n\n\t/**\n\t * Paginated backlinks from page\n\t * @method WikiPage#backlinks\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n\t * @param  {Number} [limit] - number of backlinks per page\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\n\t */\n\tfunction backlinks(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'backlinks',\n\t\t\t\tbllimit: limit,\n\t\t\t\tbltitle: raw.title\n\t\t\t},\n\t\t\tres => res.query.backlinks.map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Get list of links to different translations\n\t * @method WikiPage#langlinks\n\t * @return {Promise} - includes link objects { lang, title }\n\t */\n\tfunction langlinks() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'langlinks',\n\t\t\tlllimit: 'max',\n\t\t\ttitles: raw.title\n\t\t}).then(res =>\n\t\t\tres.query.pages[raw.pageid].langlinks.map(link => {\n\t\t\t\treturn {\n\t\t\t\t\tlang: link.lang,\n\t\t\t\t\ttitle: link['*']\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t}\n\n\tconst page = {\n\t\traw,\n\t\thtml,\n\t\trawContent,\n\t\tcontent,\n\t\tsummary,\n\t\timages,\n\t\treferences,\n\t\tlinks,\n\t\tcategories,\n\t\tcoordinates,\n\t\tinfo,\n\t\tbacklinks,\n\t\trawImages,\n\t\tmainImage,\n\t\tlanglinks,\n\t\trawInfo,\n\t\tfullInfo,\n\t\ttables\n\t};\n\n\treturn page;\n}\n"]}